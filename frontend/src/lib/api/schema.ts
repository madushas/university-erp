/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Get the currently authenticated user's profile
         */
        get: operations["getCurrentUser"];
        /**
         * Update current user
         * @description Update the currently authenticated user's profile (limited fields)
         */
        put: operations["updateCurrentUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDegreeAudit"];
        put: operations["updateDegreeAudit"];
        post?: never;
        delete: operations["deleteDegreeAudit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplication"];
        put: operations["updateApplication"];
        post?: never;
        delete: operations["deleteApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAcademicRecord"];
        put: operations["updateAcademicRecord"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update registration status
         * @description Update the status of a registration
         */
        put: operations["updateStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/{id}/grade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update registration grade
         * @description Update the grade for a registration (admin only)
         */
        put: operations["updateGrade"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLeaveTypeById"];
        put: operations["updateLeaveType"];
        post?: never;
        delete: operations["deleteLeaveType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLeaveRequestById"];
        put: operations["updateLeaveRequest"];
        post?: never;
        delete: operations["deleteLeaveRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEmployeeById"];
        put: operations["updateEmployee"];
        post?: never;
        delete: operations["deleteEmployee"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get course by ID
         * @description Retrieve a specific course by its ID
         */
        get: operations["getCourseById"];
        /**
         * Update a course
         * @description Update an existing course (admin only)
         */
        put: operations["updateCourse"];
        post?: never;
        /**
         * Delete a course
         * @description Delete a course (admin only)
         */
        delete: operations["deleteCourse"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserById"];
        put: operations["updateUser"];
        post?: never;
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/fee-structures/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFeeStructure"];
        put: operations["updateFeeStructure"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/billing-statements/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateBillingStatementStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["patchBillingStatementStatus"];
        trace?: never;
    };
    "/api/v1/admin/departments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateDepartment"];
        post?: never;
        delete: operations["deleteDepartment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/transcripts/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["requestTranscript"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/transcripts/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["generateTranscript"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["generateDegreeAudit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllApplications"];
        put?: never;
        post: operations["createApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/{id}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["submitApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createAcademicRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register for course
         * @description Register the current user for a course
         */
        post: operations["registerForCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/enroll/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enroll in course
         * @description Enroll the current user in a course
         */
        post: operations["enrollInCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/admin/enroll/{userId}/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Admin enroll user
         * @description Enroll a specific user in a course (admin only)
         */
        post: operations["adminEnrollUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllLeaveTypes"];
        put?: never;
        post: operations["createLeaveType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllLeaveRequests"];
        put?: never;
        post: operations["createLeaveRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllEmployees"];
        put?: never;
        post: operations["createEmployee"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all courses
         * @description Retrieve all courses (accessible by students and admins)
         */
        get: operations["getAllCourses"];
        put?: never;
        /**
         * Create a new course
         * @description Create a new course (admin only)
         */
        post: operations["createCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Register a new user account
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh token
         * @description Get new access token using refresh token
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User logout
         * @description Logout user and invalidate refresh token
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user and return JWT tokens
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllUsers"];
        put?: never;
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/fee-structures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllFeeStructures"];
        put?: never;
        post: operations["createFeeStructure"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/billing-statements/{id}/line-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBillingStatementLineItems"];
        put?: never;
        post: operations["addLineItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/billing-statements/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["generateBillingStatement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllStudentAccounts"];
        put?: never;
        post: operations["createStudentAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/departments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllDepartments"];
        put?: never;
        post: operations["createDepartment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/loggers/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'loggers-name' */
        get: operations["loggerLevels"];
        put?: never;
        /** Actuator web endpoint 'loggers-name' */
        post: operations["configureLogLevel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/transcripts/requests/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateTranscriptRequestStatus"];
        trace?: never;
    };
    "/api/v1/student/transcripts/requests/{id}/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["processTranscriptRequest"];
        trace?: never;
    };
    "/api/v1/student/transcripts/requests/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["cancelTranscriptRequest"];
        trace?: never;
    };
    "/api/v1/student/degree-audits/{id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["approveDegreeAudit"];
        trace?: never;
    };
    "/api/v1/student/applications/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateApplicationStatus"];
        trace?: never;
    };
    "/api/v1/student/academic-records/{id}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateAcademicProgress"];
        trace?: never;
    };
    "/api/v1/student/academic-records/{id}/graduate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["markAsGraduated"];
        trace?: never;
    };
    "/api/v1/hr/leave/types/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateLeaveTypeStatus"];
        trace?: never;
    };
    "/api/v1/hr/leave/requests/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["rejectLeaveRequest"];
        trace?: never;
    };
    "/api/v1/hr/leave/requests/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["cancelLeaveRequest"];
        trace?: never;
    };
    "/api/v1/hr/leave/requests/{id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["approveLeaveRequest"];
        trace?: never;
    };
    "/api/v1/hr/employees/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateEmployeeStatus"];
        trace?: never;
    };
    "/api/v1/admin/users/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateUserStatus"];
        trace?: never;
    };
    "/api/v1/admin/registrations/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateRegistrationStatus"];
        trace?: never;
    };
    "/api/v1/admin/registrations/{id}/payment-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updatePaymentStatus"];
        trace?: never;
    };
    "/api/v1/admin/registrations/{id}/grade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateGrade_1"];
        trace?: never;
    };
    "/api/v1/admin/financial/accounts/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateAccountStatus"];
        trace?: never;
    };
    "/api/v1/admin/courses/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateCourseStatus"];
        trace?: never;
    };
    "/api/v1/student/transcripts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTranscript"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/transcripts/student/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTranscriptsByStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/transcripts/requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTranscriptRequest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/transcripts/requests/student/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTranscriptRequestsByStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/transcripts/requests/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPendingTranscriptRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/student/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDegreeAuditsByStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/student/{studentId}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDegreeProgress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/student/{studentId}/missing-requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMissingRequirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/student/{studentId}/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLatestDegreeAudit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/student/{studentId}/graduation-eligibility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["checkGraduationEligibility"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/program/{programId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDegreeAuditsByProgram"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/degree-audits/eligible-for-graduation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getStudentsEligibleForGraduation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/student/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplicationsByStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplicationsByStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/statistics/year/{academicYearId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplicationStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/program/{programId}/year/{academicYearId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplicationsByProgramAndYear"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/pending-review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplicationsForReview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/overdue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOverdueApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/applications/number/{applicationNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplicationByNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/student/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAcademicRecordsByStudent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/student/{studentId}/gpa-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getGpaHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/student/{studentId}/degree-progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDegreeProgress_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/student/{studentId}/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCurrentAcademicRecord"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/statistics/program/{programId}/year/{academicYearId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAcademicStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/program/{programId}/semester/{semesterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAcademicRecordsByProgramAndSemester"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/eligible-for-graduation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getStudentsEligibleForGraduation_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/student/academic-records/academic-standing/{standing}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getStudentsByAcademicStanding"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get registration by ID
         * @description Get a specific registration by ID
         */
        get: operations["getRegistration"];
        put?: never;
        post?: never;
        /**
         * Delete registration
         * @description Delete a registration (admin only)
         */
        delete: operations["deleteRegistration"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user registrations
         * @description Get all registrations for a specific user
         */
        get: operations["getUserRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get registrations by status
         * @description Get all registrations with a specific status (admin only)
         */
        get: operations["getRegistrationsByStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my registrations
         * @description Get all registrations for the current user
         */
        get: operations["getMyRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/course/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get course registrations
         * @description Get all registrations for a specific course (admin or instructor of the course)
         */
        get: operations["getCourseRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instructors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all active instructors
         * @description Retrieve all active instructors for course assignment
         */
        get: operations["getAllActiveInstructors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instructors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get instructor by ID
         * @description Retrieve a specific instructor by their ID
         */
        get: operations["getInstructorById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instructors/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search instructors by name
         * @description Search instructors by first or last name
         */
        get: operations["searchInstructors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/reports/leave-usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLeaveUsageReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/reports/headcount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getHeadcountReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/types/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/types/code/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLeaveTypeByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/requests/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLeaveStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/requests/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPendingLeaveRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/requests/my-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyLeaveRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/requests/employee/{employeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLeaveRequestsByEmployee"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/leave/requests/calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLeaveCalendar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/type/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEmployeesByType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/tenure-track-pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTenureTrackPending"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/supervisor/{supervisorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEmployeesBySupervisor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEmployeeStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/number/{employeeNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEmployeeByNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/my-record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyEmployeeRecord"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/employees/department/{department}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEmployeesByDepartment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hr/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getHRDashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/financial/student-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyStudentAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/financial/billing-statements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBillingStatement"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/financial/billing-statements/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyBillingStatements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/financial/accounts/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search courses by title
         * @description Search courses by title (case-insensitive)
         */
        get: operations["searchCoursesByTitle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/paged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get courses with pagination
         * @description Retrieve paginated courses
         */
        get: operations["getCoursesPaged"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my courses as instructor
         * @description Retrieve courses assigned to current instructor
         */
        get: operations["getMyCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/instructor/{instructor}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get courses by instructor
         * @description Retrieve courses by instructor name
         */
        get: operations["getCoursesByInstructor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/code/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get course by code
         * @description Retrieve a specific course by its code
         */
        get: operations["getCourseByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available courses
         * @description Retrieve courses that are not full
         */
        get: operations["getAvailableCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user info
         * @description Get information about the currently authenticated user
         */
        get: operations["getCurrentUser_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/student/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get student analytics
         * @description Get analytics for a specific student
         */
        get: operations["getStudentAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/recent-activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent activity analytics
         * @description Get recent activity analytics (admin only)
         */
        get: operations["getRecentActivityAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/financial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get financial analytics
         * @description Get financial analytics (admin only)
         */
        get: operations["getFinancialAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/department/{departmentCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get department analytics
         * @description Get analytics for a specific department (admin only)
         */
        get: operations["getDepartmentAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dashboard analytics
         * @description Get comprehensive dashboard analytics (admin only)
         */
        get: operations["getDashboardAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analytics/course/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get course analytics
         * @description Get analytics for a specific course (admin only)
         */
        get: operations["getCourseAnalytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/reports/financial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFinancialReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/reports/academic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAcademicReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/billing-statements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllBillingStatements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/financial/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getStudentAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllCoursesForAdmin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application health status
         * @description Returns the overall health status of the application
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application version
         * @description Returns version and build information
         */
        get: operations["getVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Readiness probe
         * @description Checks if the application is ready to serve requests
         */
        get: operations["getReadiness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get performance metrics
         * @description Returns system-wide performance metrics
         */
        get: operations["getPerformanceMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/performance/{endpoint}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get performance metrics for specific endpoint
         * @description Returns performance metrics for a specific endpoint
         */
        get: operations["getEndpointMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Liveness probe
         * @description Checks if the application is alive and running
         */
        get: operations["getLiveness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator root web endpoint */
        get: operations["links"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/threaddump": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'threaddump' */
        get: operations["threadDump"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'metrics' */
        get: operations["listNames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/metrics/{requiredMetricName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'metrics-requiredMetricName' */
        get: operations["metric"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/loggers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'loggers' */
        get: operations["loggers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'info' */
        get: operations["info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'health' */
        get: operations["health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/env": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'env' */
        get: operations["environment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/env/{toMatch}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'env-toMatch' */
        get: operations["environmentEntry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/configprops": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'configprops' */
        get: operations["configurationProperties"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actuator/configprops/{prefix}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Actuator web endpoint 'configprops-prefix' */
        get: operations["configurationPropertiesWithPrefix"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/registrations/drop/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Drop course
         * @description Drop a course for the current user
         */
        delete: operations["dropCourse"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["unenrollStudent"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdateProfileRequest: {
            firstName?: string;
            lastName?: string;
            email?: string;
            phoneNumber?: string;
            address?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
        };
        UserResponse: {
            /** Format: int64 */
            id?: number;
            username?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "STUDENT" | "INSTRUCTOR" | "ADMIN";
            employeeId?: string;
            studentId?: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            address?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
            department?: string;
            /** Format: int32 */
            yearOfStudy?: number;
            /** Format: double */
            gpa?: number;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "GRADUATED" | "PENDING_APPROVAL";
            /** Format: date */
            enrollmentDate?: string;
            /** Format: date */
            graduationDate?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        DegreeAuditDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            studentId?: number;
            studentName?: string;
            studentEmail?: string;
            studentNumber?: string;
            /** Format: int64 */
            academicProgramId?: number;
            programName?: string;
            degreeType?: string;
            departmentName?: string;
            auditType?: string;
            /** Format: date */
            auditDate?: string;
            auditStatus?: string;
            auditedByName?: string;
            totalRequiredCredits?: number;
            totalEarnedCredits?: number;
            totalRemainingCredits?: number;
            overallGpa?: number;
            majorGpa?: number;
            completionPercentage?: number;
            /** Format: int32 */
            totalRequiredCourses?: number;
            /** Format: int32 */
            totalCompletedCourses?: number;
            expectedGraduationDate?: string;
            notes?: string;
            advisorComments?: string;
            isEligibleForGraduation?: boolean;
            graduationEligibilityNotes?: string;
            hasOutstandingRequirements?: boolean;
            outstandingRequirementsNotes?: string;
            academicStanding?: string;
            isOnTrack?: boolean;
            advisorRecommendations?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            requirementItems?: components["schemas"]["DegreeRequirementItemDto"][];
            /** Format: int32 */
            requirementItemsCount?: number;
        };
        DegreeRequirementItemDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            degreeAuditId?: number;
            requirementCategory?: string;
            requirementName?: string;
            description?: string;
            requirementType?: string;
            /** Format: int32 */
            requiredCredits?: number;
            /** Format: int32 */
            earnedCredits?: number;
            /** Format: int32 */
            remainingCredits?: number;
            /** Format: int32 */
            requiredCourses?: number;
            /** Format: int32 */
            completedCourses?: number;
            /** Format: int32 */
            remainingCourses?: number;
            minimumGpa?: number;
            currentGpa?: number;
            status?: string;
            isCompleted?: boolean;
            isInProgress?: boolean;
            completionNotes?: string;
            requiredCoursesList?: string;
            completedCoursesList?: string;
            inProgressCoursesList?: string;
            recommendedCoursesList?: string;
        };
        ApplicationDocumentDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            applicationId?: number;
            applicationNumber?: string;
            documentType?: string;
            documentName?: string;
            fileName?: string;
            filePath?: string;
            mimeType?: string;
            /** Format: int64 */
            fileSize?: number;
            /** @enum {string} */
            verificationStatus?: "PENDING" | "VERIFIED" | "REJECTED" | "MISSING";
            isRequired?: boolean;
            description?: string;
            notes?: string;
            isVerified?: boolean;
            /** Format: date-time */
            verifiedDate?: string;
            verifiedByName?: string;
            verificationNotes?: string;
            /** Format: date-time */
            uploadedDate?: string;
            uploadedByName?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ApplicationDto: {
            /** Format: int64 */
            id?: number;
            applicationNumber?: string;
            /** Format: int64 */
            applicantId?: number;
            applicantName?: string;
            applicantEmail?: string;
            /** Format: int64 */
            academicProgramId: number;
            programName?: string;
            degreeType?: string;
            departmentName?: string;
            /** Format: int64 */
            academicYearId: number;
            academicYearName?: string;
            /** Format: int64 */
            academicSemesterId: number;
            academicSemesterName?: string;
            /** @enum {string} */
            applicationType: "UNDERGRADUATE" | "GRADUATE" | "TRANSFER" | "VISITING" | "INTERNATIONAL" | "READMISSION";
            /** Format: date */
            applicationDate?: string;
            /** Format: date */
            applicationDeadline?: string;
            /** Format: date */
            expectedEntryDate?: string;
            /** @enum {string} */
            status?: "DRAFT" | "SUBMITTED" | "UNDER_REVIEW" | "ACCEPTED" | "REJECTED" | "WAITLISTED" | "WITHDRAWN" | "EXPIRED";
            /** @enum {string} */
            reviewStatus?: "PENDING" | "IN_PROGRESS" | "COMPLETED" | "DEFERRED";
            /** Format: date */
            decisionDate?: string;
            decisionReason?: string;
            /** @enum {string} */
            preferredContactMethod?: "EMAIL" | "PHONE" | "MAIL" | "TEXT";
            phoneNumber?: string;
            alternateEmail?: string;
            previousInstitution?: string;
            previousGpa?: number;
            /** Format: date */
            graduationDate?: string;
            degreeObtained?: string;
            majorField?: string;
            personalStatement?: string;
            statementOfPurpose?: string;
            researchInterests?: string;
            careerGoals?: string;
            financialAidRequested?: boolean;
            estimatedFamilyContribution?: number;
            scholarshipRequested?: boolean;
            applicationFeeAmount?: number;
            applicationFeePaid?: boolean;
            /** Format: date-time */
            applicationFeePaymentDate?: string;
            applicationFeeWaived?: boolean;
            applicationFeeWaiverReason?: string;
            /** Format: date-time */
            submittedDate?: string;
            /** Format: date-time */
            lastReviewedDate?: string;
            reviewedByName?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: int32 */
            documentCount?: number;
            /** Format: int32 */
            reviewCount?: number;
            documents?: components["schemas"]["ApplicationDocumentDto"][];
            reviews?: components["schemas"]["ApplicationReviewDto"][];
        };
        ApplicationReviewDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            applicationId?: number;
            applicationNumber?: string;
            reviewType?: string;
            reviewerName?: string;
            reviewerRole?: string;
            /** Format: date-time */
            reviewDate?: string;
            comments?: string;
            recommendation?: string;
            /** Format: int32 */
            rating?: number;
            strengths?: string;
            weaknesses?: string;
            additionalNotes?: string;
            status?: string;
            isConfidential?: boolean;
            isFinalReview?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        StudentAcademicRecordDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            studentId: number;
            studentName?: string;
            studentEmail?: string;
            studentNumber?: string;
            /** Format: int64 */
            academicProgramId: number;
            programName?: string;
            degreeType?: string;
            departmentName?: string;
            /** Format: int64 */
            academicYearId: number;
            academicYearName?: string;
            /** Format: int64 */
            academicSemesterId: number;
            academicSemesterName?: string;
            enrollmentStatus?: string;
            studentClassification?: string;
            academicStanding?: string;
            cumulativeGpa?: number;
            semesterGpa?: number;
            /** Format: int32 */
            totalCreditsEarned?: number;
            /** Format: int32 */
            totalCreditsAttempted?: number;
            /** Format: int32 */
            semesterCreditsEarned?: number;
            /** Format: int32 */
            semesterCreditsAttempted?: number;
            /** Format: date */
            enrollmentDate?: string;
            /** Format: date */
            expectedGraduationDate?: string;
            /** Format: date */
            graduationDate?: string;
            majorDeclarationDate?: string;
            minorField?: string;
            concentrationArea?: string;
            advisorName?: string;
            hasAcademicHold?: boolean;
            academicHoldReason?: string;
            hasDisciplinaryAction?: boolean;
            disciplinaryActionReason?: string;
            isOnAcademicProbation?: boolean;
            academicProbationReason?: string;
            /** Format: date */
            academicProbationDate?: string;
            isOnAcademicWarning?: boolean;
            academicWarningReason?: string;
            /** Format: int32 */
            transferCredits?: number;
            transferInstitution?: string;
            transferGpa?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: int32 */
            courseCount?: number;
            averageGrade?: number;
        };
        CourseDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            code?: string;
            title?: string;
            description?: string;
            /** Format: int64 */
            instructorId?: number;
            instructorName?: string;
            instructorEmail?: string;
            department?: string;
            courseLevel?: string;
            schedule?: string;
            classroom?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            startTime?: components["schemas"]["LocalTime"];
            endTime?: components["schemas"]["LocalTime"];
            daysOfWeek?: string;
            /** Format: int32 */
            credits?: number;
            /** Format: int32 */
            maxStudents?: number;
            /** Format: int32 */
            minStudents?: number;
            courseFee?: number;
            prerequisites?: string;
            /** @enum {string} */
            status?: "DRAFT" | "PUBLISHED" | "ACTIVE" | "CANCELLED" | "COMPLETED" | "ARCHIVED";
            syllabusUrl?: string;
            textbook?: string;
            passingGrade?: string;
            /** Format: int32 */
            enrolledStudents?: number;
        };
        LocalTime: {
            /** Format: int32 */
            hour?: number;
            /** Format: int32 */
            minute?: number;
            /** Format: int32 */
            second?: number;
            /** Format: int32 */
            nano?: number;
        };
        RegistrationDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            user?: components["schemas"]["UserDto"];
            course?: components["schemas"]["CourseDto"];
            /** Format: date-time */
            registrationDate?: string;
            grade?: string;
            /** Format: double */
            gradePoints?: number;
            /** @enum {string} */
            status?: "ENROLLED" | "COMPLETED" | "DROPPED" | "PENDING" | "WITHDRAWN" | "FAILED" | "TRANSFERRED";
            /** Format: double */
            attendancePercentage?: number;
            midtermGrade?: string;
            finalGrade?: string;
            courseFeePaid?: number;
            /** @enum {string} */
            paymentStatus?: "PENDING" | "PAID" | "PARTIAL" | "OVERDUE" | "REFUNDED" | "CANCELLED";
            /** Format: date-time */
            paymentDate?: string;
            paymentMethod?: string;
            transcriptReleased?: boolean;
            /** Format: date-time */
            completionDate?: string;
            certificateIssued?: boolean;
            notes?: string;
        };
        UserDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            username?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "STUDENT" | "INSTRUCTOR" | "ADMIN";
            /** @enum {string} */
            userType?: "STUDENT" | "FACULTY" | "STAFF" | "ADMIN" | "PARENT" | "ALUMNI";
            /** @enum {string} */
            employeeType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            /** @enum {string} */
            academicLevel?: "UNDERGRADUATE" | "GRADUATE" | "DOCTORAL" | "CERTIFICATE";
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "GRADUATED" | "PENDING_APPROVAL";
            employeeId?: string;
            studentId?: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            address?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
            department?: string;
            /** Format: int32 */
            yearOfStudy?: number;
            /** Format: double */
            gpa?: number;
            /** Format: date */
            enrollmentDate?: string;
            /** Format: date */
            graduationDate?: string;
            /** Format: date */
            admissionDate?: string;
            /** Format: date */
            expectedGraduationDate?: string;
            emergencyContactName?: string;
            emergencyContactPhone?: string;
            emergencyContactRelationship?: string;
            profilePictureUrl?: string;
            preferredLanguage?: string;
            timezone?: string;
            /** Format: date-time */
            lastLoginAt?: string;
            /** Format: date-time */
            passwordChangedAt?: string;
            /** Format: date-time */
            accountLockedUntil?: string;
            /** Format: int32 */
            failedLoginAttempts?: number;
        };
        LeaveType: {
            /** Format: int64 */
            id?: number;
            code: string;
            name: string;
            description?: string;
            isPaid?: boolean;
            requiresApproval?: boolean;
            /** Format: int32 */
            maxDaysPerYear?: number;
            /** Format: int32 */
            maxConsecutiveDays?: number;
            accrualRate?: number;
            carryoverAllowed?: boolean;
            /** Format: int32 */
            maxCarryoverDays?: number;
            /** Format: int32 */
            advanceNoticeRequiredDays?: number;
            documentationRequired?: boolean;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
            /** Format: date-time */
            createdAt?: string;
        };
        EmployeeRecord: {
            /** Format: int64 */
            id?: number;
            user: components["schemas"]["User"];
            employeeNumber: string;
            /** Format: date */
            hireDate: string;
            /** @enum {string} */
            employmentType: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            /** @enum {string} */
            employmentStatus?: "ACTIVE" | "INACTIVE" | "TERMINATED" | "RETIRED";
            jobTitle: string;
            department?: string;
            supervisor?: components["schemas"]["User"];
            salary?: number;
            hourlyRate?: number;
            benefitsEligible?: boolean;
            tenureTrack?: boolean;
            /** Format: date */
            tenureDate?: string;
            /** Format: date */
            contractStartDate?: string;
            /** Format: date */
            contractEndDate?: string;
            officeLocation?: string;
            officePhone?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        LeaveRequest: {
            /** Format: int64 */
            id?: number;
            employee: components["schemas"]["EmployeeRecord"];
            leaveType: components["schemas"]["LeaveType"];
            requestNumber: string;
            /** Format: date */
            startDate: string;
            /** Format: date */
            endDate: string;
            totalDays: number;
            reason?: string;
            emergencyContactName?: string;
            emergencyContactPhone?: string;
            supportingDocumentUrl?: string;
            /** @enum {string} */
            status?: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
            requestedBy: components["schemas"]["User"];
            approvedBy?: components["schemas"]["User"];
            /** Format: date-time */
            approvedDate?: string;
            rejectionReason?: string;
            hrNotes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        User: {
            /** Format: int64 */
            id?: number;
            username?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            employeeId?: string;
            studentId?: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            address?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
            department?: string;
            /** Format: int32 */
            yearOfStudy?: number;
            /** Format: double */
            gpa?: number;
            /** @enum {string} */
            role?: "STUDENT" | "INSTRUCTOR" | "ADMIN";
            /** @enum {string} */
            userType?: "STUDENT" | "FACULTY" | "STAFF" | "ADMIN" | "PARENT" | "ALUMNI";
            /** @enum {string} */
            employeeType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            /** @enum {string} */
            academicLevel?: "UNDERGRADUATE" | "GRADUATE" | "DOCTORAL" | "CERTIFICATE";
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "GRADUATED" | "PENDING_APPROVAL";
            /** Format: date */
            enrollmentDate?: string;
            /** Format: date */
            graduationDate?: string;
            /** Format: date */
            admissionDate?: string;
            /** Format: date */
            expectedGraduationDate?: string;
            emergencyContactName?: string;
            emergencyContactPhone?: string;
            emergencyContactRelationship?: string;
            profilePictureUrl?: string;
            preferredLanguage?: string;
            timezone?: string;
            /** Format: date-time */
            lastLoginAt?: string;
            /** Format: date-time */
            passwordChangedAt?: string;
            /** Format: date-time */
            accountLockedUntil?: string;
            /** Format: int32 */
            failedLoginAttempts?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CourseRequest: {
            code: string;
            title: string;
            description?: string;
            /** Format: int64 */
            instructorId: number;
            instructorEmail?: string;
            department?: string;
            courseLevel?: string;
            schedule: string;
            classroom?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            startTime?: components["schemas"]["LocalTime"];
            endTime?: components["schemas"]["LocalTime"];
            daysOfWeek?: string;
            /** Format: int32 */
            credits: number;
            /** Format: int32 */
            maxStudents?: number;
            /** Format: int32 */
            minStudents?: number;
            courseFee?: number;
            prerequisites?: string;
            /** @enum {string} */
            status?: "DRAFT" | "PUBLISHED" | "ACTIVE" | "CANCELLED" | "COMPLETED" | "ARCHIVED";
            syllabusUrl?: string;
            textbook?: string;
            passingGrade?: string;
        };
        UpdateUserRequest: {
            username?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "STUDENT" | "INSTRUCTOR" | "ADMIN";
            /** @enum {string} */
            userType?: "STUDENT" | "FACULTY" | "STAFF" | "ADMIN" | "PARENT" | "ALUMNI";
            /** @enum {string} */
            employeeType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            /** @enum {string} */
            academicLevel?: "UNDERGRADUATE" | "GRADUATE" | "DOCTORAL" | "CERTIFICATE";
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "GRADUATED" | "PENDING_APPROVAL";
            employeeId?: string;
            studentId?: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            address?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
            department?: string;
            /** Format: int32 */
            yearOfStudy?: number;
            /** Format: double */
            gpa?: number;
            /** Format: date */
            enrollmentDate?: string;
            /** Format: date */
            graduationDate?: string;
            /** Format: date */
            admissionDate?: string;
            /** Format: date */
            expectedGraduationDate?: string;
            emergencyContactName?: string;
            emergencyContactPhone?: string;
            emergencyContactRelationship?: string;
            profilePictureUrl?: string;
            preferredLanguage?: string;
            timezone?: string;
        };
        UpdateBillingStatusRequest: {
            /** @enum {string} */
            status?: "PENDING" | "PAID" | "PARTIAL" | "OVERDUE" | "CANCELLED" | "REFUNDED";
        };
        AcademicProgram: {
            /** Format: int64 */
            id?: number;
            code?: string;
            name?: string;
            description?: string;
            department?: components["schemas"]["Department"];
            /** @enum {string} */
            programType?: "UNDERGRADUATE" | "GRADUATE" | "DOCTORAL" | "CERTIFICATE";
            degreeType?: string;
            /** Format: int32 */
            creditRequirements?: number;
            /** Format: int32 */
            durationSemesters?: number;
            admissionRequirements?: string;
            graduationRequirements?: string;
            accreditationInfo?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "DISCONTINUED";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        AcademicSemester: {
            /** Format: int64 */
            id?: number;
            academicYear?: components["schemas"]["AcademicYear"];
            code?: string;
            name?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** Format: date */
            registrationStartDate?: string;
            /** Format: date */
            registrationEndDate?: string;
            /** Format: date */
            addDropDeadline?: string;
            /** Format: date */
            withdrawalDeadline?: string;
            /** Format: date */
            finalExamStartDate?: string;
            /** Format: date */
            finalExamEndDate?: string;
            /** Format: date */
            gradeSubmissionDeadline?: string;
            /** @enum {string} */
            status?: "PLANNING" | "REGISTRATION_OPEN" | "ACTIVE" | "FINALS_PERIOD" | "GRADES_DUE" | "COMPLETED" | "ARCHIVED";
            isCurrent?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        AcademicYear: {
            /** Format: int64 */
            id?: number;
            code?: string;
            name?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "ARCHIVED";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            semesters?: components["schemas"]["AcademicSemester"][];
        };
        BillingLineItem: {
            /** Format: int64 */
            id?: number;
            billingStatement?: components["schemas"]["BillingStatement"];
            /** Format: int32 */
            lineNumber?: number;
            description?: string;
            /** @enum {string} */
            itemType?: "TUITION" | "FEE" | "PENALTY" | "REFUND" | "ADJUSTMENT" | "DISCOUNT" | "TAX";
            /** @enum {string} */
            itemCategory?: "ACADEMIC" | "ADMINISTRATIVE" | "FACILITY" | "TECHNOLOGY" | "HEALTH" | "RECREATION" | "OTHER";
            /** Format: int32 */
            quantity?: number;
            unitPrice?: number;
            amount?: number;
            course?: components["schemas"]["Course"];
            feeStructure?: components["schemas"]["FeeStructure"];
            /** Format: date */
            servicePeriodStart?: string;
            /** Format: date */
            servicePeriodEnd?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        BillingStatement: {
            /** Format: int64 */
            id?: number;
            studentAccount?: components["schemas"]["StudentAccount"];
            statementNumber?: string;
            /** Format: date */
            billingDate?: string;
            /** Format: date */
            dueDate?: string;
            academicYear?: components["schemas"]["AcademicYear"];
            semester?: components["schemas"]["AcademicSemester"];
            subtotalAmount?: number;
            taxAmount?: number;
            discountAmount?: number;
            totalAmount?: number;
            paidAmount?: number;
            balanceAmount?: number;
            paymentTerms?: string;
            lateFeeRate?: number;
            minimumPayment?: number;
            /** @enum {string} */
            status?: "PENDING" | "PAID" | "PARTIAL" | "OVERDUE" | "CANCELLED" | "REFUNDED";
            /** Format: int64 */
            paymentPlanId?: number;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            lineItems?: components["schemas"]["BillingLineItem"][];
            paymentAllocations?: components["schemas"]["PaymentAllocation"][];
            lateFees?: components["schemas"]["LateFee"][];
            refunds?: components["schemas"]["Refund"][];
            remainingBalance?: number;
            overdue?: boolean;
            /** Format: int32 */
            daysOverdue?: number;
            paid?: boolean;
        };
        Course: {
            /** Format: int64 */
            id?: number;
            code?: string;
            title?: string;
            description?: string;
            instructor?: components["schemas"]["User"];
            instructorEmail?: string;
            department?: string;
            courseLevel?: string;
            schedule?: string;
            classroom?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            startTime?: components["schemas"]["LocalTime"];
            endTime?: components["schemas"]["LocalTime"];
            daysOfWeek?: string;
            /** Format: int32 */
            credits?: number;
            /** Format: int32 */
            maxStudents?: number;
            /** Format: int32 */
            minStudents?: number;
            courseFee?: number;
            prerequisites?: string;
            /** @enum {string} */
            status?: "DRAFT" | "PUBLISHED" | "ACTIVE" | "CANCELLED" | "COMPLETED" | "ARCHIVED";
            syllabusUrl?: string;
            textbook?: string;
            passingGrade?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Department: {
            /** Format: int64 */
            id?: number;
            code?: string;
            name?: string;
            description?: string;
            headOfDepartment?: string;
            headEmail?: string;
            building?: string;
            roomNumber?: string;
            phoneNumber?: string;
            email?: string;
            website?: string;
            budgetAllocation?: number;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "ARCHIVED";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        FeeStructure: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
            academicYear?: components["schemas"]["AcademicYear"];
            program?: components["schemas"]["AcademicProgram"];
            /** @enum {string} */
            studentType?: "UNDERGRADUATE" | "GRADUATE" | "DOCTORAL" | "CERTIFICATE" | "CONTINUING_EDUCATION";
            /** @enum {string} */
            residencyStatus?: "DOMESTIC" | "INTERNATIONAL" | "RESIDENT" | "NON_RESIDENT";
            /** @enum {string} */
            enrollmentStatus?: "FULL_TIME" | "PART_TIME" | "AUDIT";
            baseTuition?: number;
            tuitionPerCredit?: number;
            technologyFee?: number;
            activityFee?: number;
            libraryFee?: number;
            labFee?: number;
            parkingFee?: number;
            healthFee?: number;
            recreationFee?: number;
            studentUnionFee?: number;
            graduationFee?: number;
            applicationFee?: number;
            registrationFee?: number;
            lateRegistrationFee?: number;
            transcriptFee?: number;
            /** Format: date */
            effectiveDate?: string;
            /** Format: date */
            expiryDate?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "ARCHIVED";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            billingLineItems?: components["schemas"]["BillingLineItem"][];
            totalStandardFees?: number;
            currentlyActive?: boolean;
        };
        LateFee: {
            /** Format: int64 */
            id?: number;
            studentAccount?: components["schemas"]["StudentAccount"];
            billingStatement?: components["schemas"]["BillingStatement"];
            /** @enum {string} */
            feeType?: "LATE_PAYMENT" | "RETURNED_CHECK" | "PAYMENT_PLAN_DEFAULT";
            originalAmount?: number;
            feeRate?: number;
            calculatedFee?: number;
            assessedFee?: number;
            waivedAmount?: number;
            /** Format: date */
            dueDate?: string;
            /** Format: date */
            assessmentDate?: string;
            /** Format: date */
            waivedDate?: string;
            /** @enum {string} */
            status?: "ASSESSED" | "WAIVED" | "PAID";
            waivedBy?: components["schemas"]["User"];
            waiverReason?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        Payment: {
            /** Format: int64 */
            id?: number;
            studentAccount?: components["schemas"]["StudentAccount"];
            paymentNumber?: string;
            /** Format: date */
            paymentDate?: string;
            amount?: number;
            /** @enum {string} */
            paymentMethod?: "CASH" | "CHECK" | "CREDIT_CARD" | "DEBIT_CARD" | "BANK_TRANSFER" | "ACH" | "WIRE" | "FINANCIAL_AID" | "SCHOLARSHIP" | "EMPLOYER" | "THIRD_PARTY";
            /** @enum {string} */
            paymentType?: "REGULAR" | "REFUND" | "REVERSAL" | "ADJUSTMENT";
            referenceNumber?: string;
            checkNumber?: string;
            gatewayTransactionId?: string;
            authorizationCode?: string;
            bankName?: string;
            accountLastFour?: string;
            routingNumber?: string;
            /** Format: date-time */
            processedDate?: string;
            processedBy?: components["schemas"]["User"];
            processingFee?: number;
            /** @enum {string} */
            status?: "PENDING" | "PAID" | "PARTIALLY_PAID" | "OVERDUE" | "REFUNDED" | "CANCELLED" | "COMPLETED" | "PROCESSING" | "FAILED";
            failureReason?: string;
            /** Format: date */
            reconciliationDate?: string;
            reconciledBy?: components["schemas"]["User"];
            notes?: string;
            receiptSent?: boolean;
            /** Format: date-time */
            receiptSentDate?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            paymentAllocations?: components["schemas"]["PaymentAllocation"][];
            failed?: boolean;
            successful?: boolean;
            pending?: boolean;
            netAmount?: number;
        };
        PaymentAllocation: {
            /** Format: int64 */
            id?: number;
            payment?: components["schemas"]["Payment"];
            billingStatement?: components["schemas"]["BillingStatement"];
            billingLineItem?: components["schemas"]["BillingLineItem"];
            allocatedAmount?: number;
            /** Format: date-time */
            allocationDate?: string;
            notes?: string;
        };
        Refund: {
            /** Format: int64 */
            id?: number;
            studentAccount?: components["schemas"]["StudentAccount"];
            refundNumber?: string;
            /** @enum {string} */
            refundType?: "OVERPAYMENT" | "WITHDRAWAL" | "COURSE_DROP" | "FEE_ADJUSTMENT" | "FINANCIAL_AID" | "ERROR_CORRECTION";
            reason?: string;
            amount?: number;
            /** Format: date */
            requestDate?: string;
            /** Format: date */
            approvedDate?: string;
            /** Format: date */
            processedDate?: string;
            /** @enum {string} */
            refundMethod?: "CHECK" | "ACH" | "CREDIT_CARD_REVERSAL" | "WIRE" | "CASH";
            checkNumber?: string;
            transactionId?: string;
            /** @enum {string} */
            status?: "REQUESTED" | "PENDING_APPROVAL" | "APPROVED" | "PROCESSED" | "CANCELLED" | "REJECTED";
            requestedBy?: components["schemas"]["User"];
            approvedBy?: components["schemas"]["User"];
            processedBy?: components["schemas"]["User"];
            originalPayment?: components["schemas"]["Payment"];
            billingStatement?: components["schemas"]["BillingStatement"];
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        StudentAccount: {
            /** Format: int64 */
            id?: number;
            student?: components["schemas"]["User"];
            accountNumber?: string;
            currentBalance?: number;
            creditLimit?: number;
            holdAmount?: number;
            /** Format: date */
            lastStatementDate?: string;
            /** @enum {string} */
            accountStatus?: "ACTIVE" | "SUSPENDED" | "CLOSED" | "HOLD";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            availableBalance?: number;
            inGoodStanding?: boolean;
        };
        UpdateDepartmentRequest: {
            name?: string;
            code?: string;
            description?: string;
            headOfDepartment?: string;
            headEmail?: string;
            /** Format: int64 */
            headId?: number;
            building?: string;
            roomNumber?: string;
            phoneNumber?: string;
            email?: string;
            website?: string;
            budgetAllocation?: number;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "ARCHIVED";
            /** Format: int64 */
            collegeId?: number;
        };
        DepartmentResponse: {
            /** Format: int64 */
            id?: number;
            name?: string;
            code?: string;
            description?: string;
            headOfDepartment?: string;
            status?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        TranscriptRequestDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            studentId: number;
            studentName?: string;
            studentEmail?: string;
            studentNumber?: string;
            /** @enum {string} */
            transcriptType: "OFFICIAL" | "UNOFFICIAL" | "ENROLLMENT_VERIFICATION" | "DEGREE_VERIFICATION";
            /** Format: date-time */
            requestDate?: string;
            purpose: string;
            notes?: string;
            /** @enum {string} */
            urgencyLevel?: "STANDARD" | "EXPEDITED" | "RUSH";
            /** @enum {string} */
            deliveryMethod: "EMAIL" | "MAIL" | "PICKUP" | "ELECTRONIC_DELIVERY";
            recipientName: string;
            recipientInstitution?: string;
            deliveryAddress?: string;
            deliveryEmail?: string;
            deliveryPhone?: string;
            /** @enum {string} */
            status?: "SUBMITTED" | "PROCESSING" | "READY" | "SHIPPED" | "DELIVERED" | "CANCELLED";
            /** Format: date-time */
            expectedDeliveryDate?: string;
            /** Format: date-time */
            actualDeliveryDate?: string;
            processedByName?: string;
            /** Format: date-time */
            processedDate?: string;
            feeAmount?: number;
            /** @enum {string} */
            paymentStatus?: "PENDING" | "PAID" | "WAIVED" | "REFUNDED";
            /** Format: date-time */
            feePaymentDate?: string;
            paymentTransactionId?: string;
            trackingNumber?: string;
            deliveryConfirmation?: string;
            isRush?: boolean;
            /** Format: date-time */
            rushDeadline?: string;
            /** Format: int64 */
            transcriptId?: number;
            transcriptNumber?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        TranscriptCourseDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            transcriptId?: number;
            courseCode?: string;
            courseName?: string;
            courseDescription?: string;
            departmentName?: string;
            academicYearName?: string;
            academicSemesterName?: string;
            termCode?: string;
            creditHours?: number;
            qualityPoints?: number;
            gradeEarned?: string;
            gradePoints?: string;
            courseStatus?: string;
            isRepeated?: boolean;
            countsTowardGpa?: boolean;
            countsTowardDegree?: boolean;
            isTransferCredit?: boolean;
            transferInstitution?: string;
            originalGrade?: string;
            instructorName?: string;
            courseLevel?: string;
            courseType?: string;
            gradeMode?: string;
            notes?: string;
        };
        TranscriptDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            studentId?: number;
            studentName?: string;
            studentEmail?: string;
            studentNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            /** Format: int64 */
            academicProgramId?: number;
            programName?: string;
            degreeType?: string;
            departmentName?: string;
            majorField?: string;
            minorField?: string;
            transcriptType?: string;
            /** Format: date */
            issueDate?: string;
            /** Format: date */
            graduationDate?: string;
            transcriptStatus?: string;
            cumulativeGpa?: number;
            majorGpa?: number;
            totalCreditsEarned?: number;
            totalCreditsAttempted?: number;
            totalQualityPoints?: number;
            degreeAwarded?: string;
            degreeAwardedDate?: string;
            graduationHonors?: string;
            thesisTitle?: string;
            finalAcademicStanding?: string;
            classRank?: string;
            gradeSummaryNotes?: string;
            transferCredits?: number;
            transferInstitutions?: string;
            transcriptNumber?: string;
            isOfficial?: boolean;
            securityFeatures?: string;
            verificationCode?: string;
            generatedByName?: string;
            /** Format: date-time */
            generatedDate?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            courses?: components["schemas"]["TranscriptCourseDto"][];
            /** Format: int32 */
            courseCount?: number;
            institutionName?: string;
            institutionAddress?: string;
            registrarSignature?: string;
            notes?: string;
        };
        RegistrationRequest: {
            /** Format: int64 */
            courseId: number;
        };
        CreateEmployeeRequest: {
            username: string;
            email: string;
            password: string;
            firstName: string;
            lastName: string;
            /** @enum {string} */
            role: "STUDENT" | "INSTRUCTOR" | "ADMIN";
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            address?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
            employeeNumber: string;
            /** Format: int64 */
            userId: number;
            /** Format: int64 */
            supervisorId?: number;
            department: string;
            jobTitle: string;
            /** @enum {string} */
            employmentType: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            /** @enum {string} */
            employmentStatus: "ACTIVE" | "INACTIVE" | "TERMINATED" | "RETIRED";
            /** Format: date */
            hireDate: string;
            salary?: number;
            hourlyRate?: number;
            benefitsEligible?: boolean;
            tenureTrack?: boolean;
            /** Format: date */
            tenureDate?: string;
            /** Format: date */
            contractStartDate?: string;
            /** Format: date */
            contractEndDate?: string;
            officeLocation?: string;
            officePhone?: string;
            emergencyContactName?: string;
            emergencyContactPhone?: string;
            emergencyContactRelationship?: string;
        };
        EmployeeRecordDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            user?: components["schemas"]["UserDto"];
            employeeNumber?: string;
            /** Format: date */
            hireDate?: string;
            /** @enum {string} */
            employmentType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            /** @enum {string} */
            employmentStatus?: "ACTIVE" | "INACTIVE" | "TERMINATED" | "RETIRED";
            jobTitle?: string;
            department?: string;
            salary?: number;
            benefitsEligible?: boolean;
            tenureTrack?: boolean;
            /** Format: date */
            contractStartDate?: string;
            /** Format: date */
            contractEndDate?: string;
            officeLocation?: string;
            officePhone?: string;
            supervisorName?: string;
            organizationalUnitName?: string;
        };
        RegisterRequest: {
            username: string;
            email: string;
            password: string;
            firstName: string;
            lastName: string;
            /** @enum {string} */
            role: "STUDENT" | "INSTRUCTOR" | "ADMIN";
        };
        AuthResponse: {
            accessToken?: string;
            refreshToken?: string;
            tokenType?: string;
            /** Format: int64 */
            expiresIn?: number;
            user?: components["schemas"]["UserResponse"];
        };
        RefreshTokenRequest: {
            refreshToken: string;
        };
        LoginRequest: {
            username: string;
            password: string;
        };
        CreateUserRequest: {
            username: string;
            email: string;
            password: string;
            firstName: string;
            lastName: string;
            /** @enum {string} */
            role: "STUDENT" | "INSTRUCTOR" | "ADMIN";
            /** @enum {string} */
            userType?: "STUDENT" | "FACULTY" | "STAFF" | "ADMIN" | "PARENT" | "ALUMNI";
            /** @enum {string} */
            employeeType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            /** @enum {string} */
            academicLevel?: "UNDERGRADUATE" | "GRADUATE" | "DOCTORAL" | "CERTIFICATE";
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "GRADUATED" | "PENDING_APPROVAL";
            employeeId?: string;
            studentId?: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            address?: string;
            city?: string;
            state?: string;
            postalCode?: string;
            country?: string;
            department?: string;
            /** Format: int32 */
            yearOfStudy?: number;
            /** Format: double */
            gpa?: number;
            /** Format: date */
            enrollmentDate?: string;
            /** Format: date */
            graduationDate?: string;
            /** Format: date */
            admissionDate?: string;
            /** Format: date */
            expectedGraduationDate?: string;
            emergencyContactName?: string;
            emergencyContactPhone?: string;
            emergencyContactRelationship?: string;
            profilePictureUrl?: string;
            preferredLanguage?: string;
            timezone?: string;
        };
        CreateBillingStatementRequest: {
            /** Format: int64 */
            studentAccountId?: number;
            /** Format: int64 */
            academicYearId?: number;
            /** Format: int64 */
            semesterId?: number;
            /** Format: int64 */
            feeStructureId?: number;
            /** Format: date */
            dueDate?: string;
            paymentTerms?: string;
            notes?: string;
            /** Format: int64 */
            studentId?: number;
            amount?: number;
            description?: string;
        };
        CreateStudentAccountRequest: {
            /** Format: int64 */
            studentId?: number;
            accountNumber?: string;
            creditLimit?: number;
            accountStatus?: string;
        };
        CreateDepartmentRequest: {
            name: string;
            code: string;
            description?: string;
            headOfDepartment?: string;
            headEmail?: string;
            /** Format: int64 */
            headId?: number;
            building?: string;
            roomNumber?: string;
            phoneNumber?: string;
            email?: string;
            website?: string;
            budgetAllocation?: number;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "ARCHIVED";
            /** Format: int64 */
            collegeId?: number;
        };
        CourseResponse: {
            /** Format: int64 */
            id?: number;
            code?: string;
            title?: string;
            description?: string;
            instructor?: string;
            schedule?: string;
            /** Format: int32 */
            credits?: number;
            /** Format: int32 */
            maxStudents?: number;
            /** Format: int32 */
            enrolledStudents?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RegistrationResponse: {
            /** Format: int64 */
            id?: number;
            user?: components["schemas"]["UserResponse"];
            course?: components["schemas"]["CourseResponse"];
            /** Format: date-time */
            registrationDate?: string;
            grade?: string;
            status?: string;
            paymentStatus?: string;
            courseFeePaid?: number;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        PageTranscriptRequestDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["TranscriptRequestDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            unpaged?: boolean;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            pageNumber?: number;
            paged?: boolean;
        };
        SortObject: {
            empty?: boolean;
            unsorted?: boolean;
            sorted?: boolean;
        };
        PageDegreeAuditDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["DegreeAuditDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageApplicationDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ApplicationDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        ApplicationStatistics: {
            /** Format: int64 */
            totalApplications?: number;
            /** Format: int64 */
            pendingApplications?: number;
            /** Format: int64 */
            acceptedApplications?: number;
            /** Format: int64 */
            rejectedApplications?: number;
            acceptanceRate?: number;
        };
        AcademicStatistics: {
            /** Format: int64 */
            totalStudents?: number;
            /** Format: double */
            averageGpa?: number;
            /** Format: int64 */
            graduatedStudents?: number;
        };
        PageStudentAcademicRecordDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["StudentAcademicRecordDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        InstructorDto: {
            /** Format: int64 */
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            department?: string;
            employeeId?: string;
            fullName?: string;
        };
        LeaveRequestDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            employee?: components["schemas"]["EmployeeRecordDto"];
            leaveType?: components["schemas"]["LeaveTypeDto"];
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** Format: int32 */
            totalDays?: number;
            reason?: string;
            /** @enum {string} */
            status?: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
            approverName?: string;
            /** Format: date */
            approvedDate?: string;
            approverComments?: string;
            isEmergency?: boolean;
            attachmentUrl?: string;
        };
        LeaveTypeDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            code?: string;
            name?: string;
            description?: string;
            isPaid?: boolean;
            requiresApproval?: boolean;
            /** Format: int32 */
            maxDaysPerYear?: number;
            /** Format: double */
            accrualRate?: number;
            carryoverAllowed?: boolean;
            /** Format: int32 */
            advanceNoticeRequiredDays?: number;
            documentationRequired?: boolean;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE";
        };
        PageLeaveRequest: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["LeaveRequest"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        StudentAccountDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            student?: components["schemas"]["UserDto"];
            accountNumber?: string;
            currentBalance?: number;
            creditLimit?: number;
            /** @enum {string} */
            status?: "ACTIVE" | "SUSPENDED" | "CLOSED" | "HOLD";
            totalCharges?: number;
            totalPayments?: number;
            outstandingBalance?: number;
        };
        BillingLineItemDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: int32 */
            lineNumber?: number;
            description?: string;
            /** @enum {string} */
            itemType?: "TUITION" | "FEE" | "PENALTY" | "REFUND" | "ADJUSTMENT" | "DISCOUNT" | "TAX";
            /** @enum {string} */
            itemCategory?: "ACADEMIC" | "ADMINISTRATIVE" | "FACILITY" | "TECHNOLOGY" | "HEALTH" | "RECREATION" | "OTHER";
            /** Format: int32 */
            quantity?: number;
            unitPrice?: number;
            amount?: number;
            /** Format: date */
            servicePeriodStart?: string;
            /** Format: date */
            servicePeriodEnd?: string;
        };
        BillingStatementDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            studentAccount?: components["schemas"]["StudentAccountDto"];
            statementNumber?: string;
            /** Format: date */
            billingDate?: string;
            /** Format: date */
            dueDate?: string;
            totalAmount?: number;
            paidAmount?: number;
            outstandingAmount?: number;
            /** @enum {string} */
            status?: "PENDING" | "PAID" | "PARTIAL" | "OVERDUE" | "CANCELLED" | "REFUNDED";
            paymentTerms?: string;
            notes?: string;
            lineItems?: components["schemas"]["BillingLineItemDto"][];
        };
        PageCourseDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["CourseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PagedResponseUserResponse: {
            content?: components["schemas"]["UserResponse"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
        };
        DepartmentRevenue: {
            departmentName?: string;
            revenue?: number;
            /** Format: int32 */
            enrollments?: number;
        };
        FinancialReportResponse: {
            totalRevenue?: number;
            totalPending?: number;
            totalPaid?: number;
            totalOverdue?: number;
            /** Format: int32 */
            totalTransactions?: number;
            /** Format: date-time */
            reportGeneratedAt?: string;
            departmentBreakdown?: components["schemas"]["DepartmentRevenue"][];
            monthlyTrend?: components["schemas"]["MonthlyRevenue"][];
        };
        MonthlyRevenue: {
            month?: string;
            revenue?: number;
            /** Format: int32 */
            enrollments?: number;
        };
        AcademicReportResponse: {
            /** Format: int32 */
            totalStudents?: number;
            /** Format: int32 */
            totalInstructors?: number;
            /** Format: int32 */
            totalCourses?: number;
            /** Format: int32 */
            totalDepartments?: number;
            /** Format: double */
            averageEnrollmentRate?: number;
            /** Format: double */
            averageCompletionRate?: number;
            /** Format: date-time */
            reportGeneratedAt?: string;
            departmentStatistics?: components["schemas"]["DepartmentStats"][];
            topCourses?: components["schemas"]["CourseStats"][];
            enrollmentTrends?: components["schemas"]["EnrollmentTrend"][];
        };
        CourseStats: {
            courseName?: string;
            courseCode?: string;
            /** Format: int32 */
            totalEnrollments?: number;
            /** Format: double */
            completionRate?: number;
            /** Format: double */
            averageGrade?: number;
        };
        DepartmentStats: {
            departmentName?: string;
            /** Format: int32 */
            totalCourses?: number;
            /** Format: int32 */
            totalStudents?: number;
            /** Format: int32 */
            totalInstructors?: number;
            /** Format: double */
            averageGPA?: number;
        };
        EnrollmentTrend: {
            period?: string;
            /** Format: int32 */
            totalEnrollments?: number;
            /** Format: int32 */
            newStudents?: number;
            /** Format: int32 */
            graduatedStudents?: number;
        };
        BillingStatementResponse: {
            /** Format: int64 */
            id?: number;
            statementNumber?: string;
            studentName?: string;
            studentId?: string;
            /** Format: date */
            billingDate?: string;
            /** Format: date */
            dueDate?: string;
            totalAmount?: number;
            balanceAmount?: number;
            /** @enum {string} */
            status?: "PENDING" | "PAID" | "PARTIAL" | "OVERDUE" | "CANCELLED" | "REFUNDED";
        };
        PageBillingStatementResponse: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["BillingStatementResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        Link: {
            href?: string;
            templated?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    updateCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequest"];
            };
        };
        responses: {
            /** @description Successfully updated user profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
            /** @description Bad request - invalid payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    getDegreeAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"];
                };
            };
        };
    };
    updateDegreeAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DegreeAuditDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"];
                };
            };
        };
    };
    deleteDegreeAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"];
                };
            };
        };
    };
    updateApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"];
                };
            };
        };
    };
    deleteApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAcademicRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"];
                };
            };
        };
    };
    updateAcademicRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudentAcademicRecordDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"];
                };
            };
        };
    };
    updateStatus: {
        parameters: {
            query: {
                /** @description Status */
                status: "ENROLLED" | "COMPLETED" | "DROPPED" | "PENDING" | "WITHDRAWN" | "FAILED" | "TRANSFERRED";
            };
            header?: never;
            path: {
                /** @description Registration ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
        };
    };
    updateGrade: {
        parameters: {
            query: {
                /** @description Grade */
                grade: string;
            };
            header?: never;
            path: {
                /** @description Registration ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
        };
    };
    getLeaveTypeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveType"];
                };
            };
        };
    };
    updateLeaveType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeaveType"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveType"];
                };
            };
        };
    };
    deleteLeaveType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLeaveRequestById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequest"];
                };
            };
        };
    };
    updateLeaveRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeaveRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequest"];
                };
            };
        };
    };
    deleteLeaveRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEmployeeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecordDto"];
                };
            };
        };
    };
    updateEmployee: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmployeeRecord"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecord"];
                };
            };
        };
    };
    deleteEmployee: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCourseById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    updateCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseRequest"];
            };
        };
        responses: {
            /** @description Course updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
            /** @description Access denied - admin role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
            /** @description Course code already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    deleteCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete course with active registrations */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied - admin role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFeeStructure: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateFeeStructure: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateBillingStatementStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBillingStatusRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BillingStatement"];
                };
            };
        };
    };
    patchBillingStatementStatus: {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    updateDepartment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDepartmentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DepartmentResponse"];
                };
            };
        };
    };
    deleteDepartment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    requestTranscript: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranscriptRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptRequestDto"];
                };
            };
        };
    };
    generateTranscript: {
        parameters: {
            query: {
                studentId: number;
                transcriptType: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptDto"];
                };
            };
        };
    };
    generateDegreeAudit: {
        parameters: {
            query: {
                studentId: number;
                academicProgramId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"];
                };
            };
        };
    };
    getAllApplications: {
        parameters: {
            query: {
                id?: number;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageApplicationDto"];
                };
            };
        };
    };
    createApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"];
                };
            };
        };
    };
    submitApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"];
                };
            };
        };
    };
    createAcademicRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudentAcademicRecordDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"];
                };
            };
        };
    };
    registerForCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationRequest"];
            };
        };
        responses: {
            /** @description Successfully registered for course */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
            /** @description Course is full or user already registered */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
        };
    };
    enrollInCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully enrolled in course */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
            /** @description Course is full or user already enrolled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
        };
    };
    adminEnrollUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: number;
                /** @description Course ID */
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
        };
    };
    getAllLeaveTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveType"][];
                };
            };
        };
    };
    createLeaveType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeaveType"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveType"];
                };
            };
        };
    };
    getAllLeaveRequests: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sortBy?: string;
                sortDir?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequestDto"][];
                };
            };
        };
    };
    createLeaveRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequest"];
                };
            };
        };
    };
    getAllEmployees: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sortBy?: string;
                sortDir?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecordDto"][];
                };
            };
        };
    };
    createEmployee: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEmployeeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecordDto"];
                };
            };
        };
    };
    getAllCourses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved courses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"][];
                };
            };
        };
    };
    createCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CourseRequest"];
            };
        };
        responses: {
            /** @description Course created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
            /** @description Access denied - admin role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
            /** @description Course code already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Username or email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Logout successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthResponse"];
                };
            };
        };
    };
    getAllUsers: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sortBy?: string;
                sortDir?: string;
                role?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedResponseUserResponse"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    getAllFeeStructures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FeeStructure"][];
                };
            };
        };
    };
    createFeeStructure: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeeStructure"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FeeStructure"];
                };
            };
        };
    };
    getBillingStatementLineItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BillingLineItem"][];
                };
            };
        };
    };
    addLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BillingLineItem"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BillingLineItem"];
                };
            };
        };
    };
    generateBillingStatement: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBillingStatementRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BillingStatement"];
                };
            };
        };
    };
    getAllStudentAccounts: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAccount"][];
                };
            };
        };
    };
    createStudentAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStudentAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAccount"];
                };
            };
        };
    };
    getAllDepartments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DepartmentResponse"][];
                };
            };
        };
    };
    createDepartment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDepartmentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DepartmentResponse"];
                };
            };
        };
    };
    loggerLevels: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    configureLogLevel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": "TRACE" | "DEBUG" | "INFO" | "WARN" | "ERROR" | "FATAL" | "OFF";
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateTranscriptRequestStatus: {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptRequestDto"];
                };
            };
        };
    };
    processTranscriptRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptRequestDto"];
                };
            };
        };
    };
    cancelTranscriptRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptRequestDto"];
                };
            };
        };
    };
    approveDegreeAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"];
                };
            };
        };
    };
    updateApplicationStatus: {
        parameters: {
            query: {
                status: "DRAFT" | "SUBMITTED" | "UNDER_REVIEW" | "ACCEPTED" | "REJECTED" | "WAITLISTED" | "WITHDRAWN" | "EXPIRED";
                reason?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"];
                };
            };
        };
    };
    updateAcademicProgress: {
        parameters: {
            query: {
                newGpa: number;
                newCredits: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"];
                };
            };
        };
    };
    markAsGraduated: {
        parameters: {
            query: {
                graduationDate: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"];
                };
            };
        };
    };
    updateLeaveTypeStatus: {
        parameters: {
            query: {
                status: "ACTIVE" | "INACTIVE";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveType"];
                };
            };
        };
    };
    rejectLeaveRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequest"];
                };
            };
        };
    };
    cancelLeaveRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequest"];
                };
            };
        };
    };
    approveLeaveRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequest"];
                };
            };
        };
    };
    updateEmployeeStatus: {
        parameters: {
            query: {
                status: "ACTIVE" | "INACTIVE" | "TERMINATED" | "RETIRED";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecord"];
                };
            };
        };
    };
    updateUserStatus: {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    updateRegistrationStatus: {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationResponse"];
                };
            };
        };
    };
    updatePaymentStatus: {
        parameters: {
            query: {
                paymentStatus: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationResponse"];
                };
            };
        };
    };
    updateGrade_1: {
        parameters: {
            query: {
                grade: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationResponse"];
                };
            };
        };
    };
    updateAccountStatus: {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAccount"];
                };
            };
        };
    };
    updateCourseStatus: {
        parameters: {
            query: {
                status: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseResponse"];
                };
            };
        };
    };
    getTranscript: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptDto"];
                };
            };
        };
    };
    getTranscriptsByStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptDto"][];
                };
            };
        };
    };
    getTranscriptRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptRequestDto"];
                };
            };
        };
    };
    getTranscriptRequestsByStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TranscriptRequestDto"][];
                };
            };
        };
    };
    getPendingTranscriptRequests: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageTranscriptRequestDto"];
                };
            };
        };
    };
    getDegreeAuditsByStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"][];
                };
            };
        };
    };
    getDegreeProgress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"];
                };
            };
        };
    };
    getMissingRequirements: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string[];
                };
            };
        };
    };
    getLatestDegreeAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"];
                };
            };
        };
    };
    checkGraduationEligibility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
        };
    };
    getDegreeAuditsByProgram: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                programId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageDegreeAuditDto"];
                };
            };
        };
    };
    getStudentsEligibleForGraduation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DegreeAuditDto"][];
                };
            };
        };
    };
    getApplicationsByStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"][];
                };
            };
        };
    };
    getApplicationsByStatus: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                status: "DRAFT" | "SUBMITTED" | "UNDER_REVIEW" | "ACCEPTED" | "REJECTED" | "WAITLISTED" | "WITHDRAWN" | "EXPIRED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageApplicationDto"];
                };
            };
        };
    };
    getApplicationStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                academicYearId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationStatistics"];
                };
            };
        };
    };
    searchApplications: {
        parameters: {
            query: {
                applicantName?: string;
                applicationNumber?: string;
                status?: "DRAFT" | "SUBMITTED" | "UNDER_REVIEW" | "ACCEPTED" | "REJECTED" | "WAITLISTED" | "WITHDRAWN" | "EXPIRED";
                programId?: number;
                academicYearId?: number;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageApplicationDto"];
                };
            };
        };
    };
    getApplicationsByProgramAndYear: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                programId: number;
                academicYearId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageApplicationDto"];
                };
            };
        };
    };
    getApplicationsForReview: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageApplicationDto"];
                };
            };
        };
    };
    getOverdueApplications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"][];
                };
            };
        };
    };
    getApplicationByNumber: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                applicationNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApplicationDto"];
                };
            };
        };
    };
    getAcademicRecordsByStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"][];
                };
            };
        };
    };
    getGpaHistory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"][];
                };
            };
        };
    };
    getDegreeProgress_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"];
                };
            };
        };
    };
    getCurrentAcademicRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"];
                };
            };
        };
    };
    getAcademicStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                programId: number;
                academicYearId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AcademicStatistics"];
                };
            };
        };
    };
    getAcademicRecordsByProgramAndSemester: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                programId: number;
                semesterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageStudentAcademicRecordDto"];
                };
            };
        };
    };
    getStudentsEligibleForGraduation_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAcademicRecordDto"][];
                };
            };
        };
    };
    getStudentsByAcademicStanding: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                standing: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageStudentAcademicRecordDto"];
                };
            };
        };
    };
    getRegistration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Registration ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"];
                };
            };
        };
    };
    deleteRegistration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Registration ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserRegistrations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"][];
                };
            };
        };
    };
    getRegistrationsByStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Registration status */
                status: "ENROLLED" | "COMPLETED" | "DROPPED" | "PENDING" | "WITHDRAWN" | "FAILED" | "TRANSFERRED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"][];
                };
            };
        };
    };
    getMyRegistrations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"][];
                };
            };
        };
    };
    getCourseRegistrations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationDto"][];
                };
            };
        };
    };
    getAllActiveInstructors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved instructors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"][];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"][];
                };
            };
        };
    };
    getInstructorById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved instructor */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"];
                };
            };
            /** @description Instructor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"];
                };
            };
        };
    };
    searchInstructors: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved instructors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InstructorDto"][];
                };
            };
        };
    };
    getLeaveUsageReport: {
        parameters: {
            query?: {
                year?: number;
                departmentId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getHeadcountReport: {
        parameters: {
            query?: {
                groupBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getLeaveTypeByCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveType"];
                };
            };
        };
    };
    getLeaveStatistics: {
        parameters: {
            query?: {
                year?: number;
                departmentId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getPendingLeaveRequests: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequestDto"][];
                };
            };
        };
    };
    getMyLeaveRequests: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageLeaveRequest"];
                };
            };
        };
    };
    getLeaveRequestsByEmployee: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path: {
                employeeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageLeaveRequest"];
                };
            };
        };
    };
    getLeaveCalendar: {
        parameters: {
            query: {
                startDate: string;
                endDate: string;
                departmentId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeaveRequest"][];
                };
            };
        };
    };
    getEmployeesByType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "ADJUNCT";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecord"][];
                };
            };
        };
    };
    getTenureTrackPending: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecord"][];
                };
            };
        };
    };
    getEmployeesBySupervisor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                supervisorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecord"][];
                };
            };
        };
    };
    getEmployeeStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getEmployeeByNumber: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                employeeNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecord"];
                };
            };
        };
    };
    getMyEmployeeRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecord"];
                };
            };
        };
    };
    getEmployeesByDepartment: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path: {
                department: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmployeeRecordDto"][];
                };
            };
        };
    };
    getHRDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getMyStudentAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAccountDto"];
                };
            };
        };
    };
    getBillingStatement: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BillingStatement"];
                };
            };
        };
    };
    getMyBillingStatements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BillingStatementDto"][];
                };
            };
        };
    };
    getMyAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAccountDto"];
                };
            };
        };
    };
    searchCoursesByTitle: {
        parameters: {
            query: {
                /** @description Title to search for */
                title: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"][];
                };
            };
        };
    };
    getCoursesPaged: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageCourseDto"];
                };
            };
        };
    };
    getMyCourses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"][];
                };
            };
        };
    };
    getCoursesByInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Instructor name */
                instructor: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"][];
                };
            };
        };
    };
    getCourseByCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    getAvailableCourses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseDto"][];
                };
            };
        };
    };
    getCurrentUser_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
            /** @description User not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    getStudentAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Student ID */
                studentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getRecentActivityAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getFinancialAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getDepartmentAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Department code */
                departmentCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getDashboardAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analytics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
            /** @description Access denied - admin role required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getCourseAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getFinancialReport: {
        parameters: {
            query?: {
                startDate?: string;
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FinancialReportResponse"];
                };
            };
        };
    };
    getAcademicReport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AcademicReportResponse"];
                };
            };
        };
    };
    getAllRegistrations: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                status?: string;
                paymentStatus?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationResponse"][];
                };
            };
        };
    };
    getAllBillingStatements: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageBillingStatementResponse"];
                };
            };
        };
    };
    getStudentAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StudentAccount"];
                };
            };
        };
    };
    getAllCoursesForAdmin: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CourseResponse"][];
                };
            };
        };
    };
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
            /** @description Service unavailable - health check failed */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Version information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getReadiness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application is ready */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
            /** @description Application is not ready */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getPerformanceMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Performance metrics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getEndpointMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                endpoint: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Endpoint metrics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
            /** @description Endpoint not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    getLiveness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application is alive */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
            /** @description Application is not responding */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    links: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": {
                        [key: string]: {
                            [key: string]: components["schemas"]["Link"];
                        };
                    };
                    "application/vnd.spring-boot.actuator.v2+json": {
                        [key: string]: {
                            [key: string]: components["schemas"]["Link"];
                        };
                    };
                    "application/json": {
                        [key: string]: {
                            [key: string]: components["schemas"]["Link"];
                        };
                    };
                };
            };
        };
    };
    threadDump: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain;charset=UTF-8": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    listNames: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    metric: {
        parameters: {
            query?: {
                tag?: string;
            };
            header?: never;
            path: {
                requiredMetricName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    loggers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    environment: {
        parameters: {
            query?: {
                pattern?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    environmentEntry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                toMatch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    configurationProperties: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    configurationPropertiesWithPrefix: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prefix: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.spring-boot.actuator.v3+json": Record<string, never>;
                    "application/vnd.spring-boot.actuator.v2+json": Record<string, never>;
                    "application/json": Record<string, never>;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dropCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Course ID */
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unenrollStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
